---
# Here we declaring ci/cd script as gitlab accepts it, more info at: https://docs.gitlab.com/ee/ci/
image: registry.gitlab.com/telekomconsalting/dexguru/dexguru-backend/docker:stable
services:
  - registry.gitlab.com/telekomconsalting/dexguru/dexguru-backend/docker:19.03.5-dind

# List of stages to follow, to do steps in parallel assign same stage to parallel steps
stages:
  - build
  - test
  - lint-helm
  - deploy-stage
  - deploy-prod

variables:
  IMAGE_HELM_KUBECTL: 'registry.gitlab.com/telekomconsalting/dexguru/dexguru-backend/helm-kubectl:3.7.1'
  HELM_CHART_STAGE_LAX: 'helm/charts/backend-stage-lax'
  HELM_CHART_PROD_LAX: 'helm/charts/backend-prod-lax'
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  GIT_SUBMODULE_STRATEGY: recursive
  LAX_STAGE_CLUSTER_NAME: stage-k8s
  LAX_PROD_CLUSTER_NAME: prod-k8s
  KUBE_NAMESPACE_STAGE: stage-indexation-gnosis-100 stage-indexation-eth-1 stage-indexation-bsc-56 stage-indexation-avalanche-43114 stage-indexation-fantom-250 stage-indexation-arbitrum-42161 stage-indexation-celo-42220 stage-indexation-optimism-10 stage-indexation-gnosis-100 stage-indexation-canto-7700 stage-indexation-nova-42170 stage-indexation-polygon-137
  KUBE_NAMESPACE_PROD: prod-indexation-eth-1 prod-indexation-bsc-56 prod-indexation-avalanche-43114 prod-indexation-polygon-137 prod-indexation-fantom-250 prod-indexation-arbitrum-42161 prod-indexation-celo-42220 prod-indexation-optimism-10 prod-indexation-gnosis-100 prod-indexation-canto-7700 prod-indexation-nova-42170
  # The environment variables below are for containers under test stage


# Build test:
build:
  stage: build
  script:
    - echo "Building docker image"
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker build -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" . -f ./Dockerfile
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  only:
    - merge_requests
    - master
    - tags

test:
  stage: test
  image: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  variables:
    EXPORT_FROM_CLICKHOUSE: "http://default:@clickhouse:8123"
  services:
    - name: clickhouse/clickhouse-server
      alias: clickhouse
  script:
    - mkdir htmlcov
    - pytest
  only:
    - merge_requests
    - master

lint-helm:
  stage: test
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  script:
    - helm lint helm/charts/backend-stage-lax --set appName=raw-data-streamer --set imageTag=${CI_COMMIT_SHORT_SHA}
#    - helm lint helm/charts/backend-prod-lax --set appName=raw-data-streamer --set imageTag=${CI_COMMIT_SHORT_SHA}
  only:
    - master
    - merge_requests


raw-data-streamer-stage:
  stage: deploy-stage
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    SERVICE_NAME: "raw-data-streamer"
    KUBE_NAMESPACE: stage-indexation-eth-1 stage-indexation-bsc-56 stage-indexation-polygon-137 stage-indexation-canto-7700 stage-indexation-nova-42170 stage-indexation-fantom-250 stage-indexation-gnosis-100 stage-indexation-arbitrum-42161 stage-indexation-optimism-10
    #stage-indexation-bsc-56 stage-indexation-eth-1 stage-indexation-canto-7700 stage-indexation-nova-42170 stage-indexation-fantom-250 stage-indexation-gnosis-100  stage-indexation-arbitrum-42161 stage-indexation-optimism-10
    HELM_CHART: ${HELM_CHART_STAGE_LAX}
  script:
    - helm/lax_stage_deploy.sh
  only:
    - master
#    - merge_requests

#
#raw-data-streamer-prod:
#  stage: deploy-prod
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-data-streamer"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
#    HELM_CHART: ${HELM_CHART_PROD_LAX}
#  script:
#    - helm/lax_prod_deploy.sh
#  only:
#    - tags
#  except:
#    - master
