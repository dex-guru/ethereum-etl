---
default:
  image:
    name: ${IMAGE_DOCKER}
    pull_policy: if-not-present
  services:
    - name: ${IMAGE_DIND}
      alias: docker
      pull_policy: if-not-present
      variables:
        DOCKER_TLS_CERTDIR: ""
        HEALTHCHECK_2375_TCP_ADDR: docker
        HEALTHCHECK_2375_TCP_PORT: 2375

stages:
  - build
  - lint
  - test
#  - db-migrations-stage
#  - db-migrations-prod
  - deploy-stage
  - deploy-prod

variables:
  FF_SCRIPT_SECTIONS: 'true'
  DOCKER_TLS_CERTDIR: ""

  IMAGE_HELM_KUBECTL: ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/helm-kubectl:3.7.2
  IMAGE_CLICKHOUSE:   ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/clickhouse-server:23.1.3.5
  IMAGE_DOCKER:       ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/docker:23.0.6
  IMAGE_DIND:         ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/docker:23.0.6-dind
  IMAGE_APP:          ${CI_HARBOR_REGISTRY_HOST}/dex.guru/${CI_PROJECT_TITLE}/${CI_PROJECT_TITLE}
  IMAGE_ELASTIC:      ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/elasticsearch:7.17.3
  GIT_SUBMODULE_STRATEGY: recursive

  KUBE_NAMESPACE_STAGE: >-
    stage-indexation-eth-1
    stage-indexation-canto-7700
    stage-indexation-base-8453
    stage-indexation-bsc-56
  KUBE_NAMESPACE_STAGE_TRACE: >-
    stage-indexation-eth-1
    stage-indexation-canto-7700
    stage-indexation-base-8453
    stage-indexation-bsc-56
  KUBE_NAMESPACE_PROD_TRACE: >-
    prod-indexation-telcotest-2017
    prod-indexation-eth-1
    prod-indexation-bsc-56
    prod-indexation-polygon-137
    prod-indexation-arbitrum-42161
    prod-indexation-canto-7700
    prod-indexation-basetestnet-84531
    prod-indexation-nova-42170
    prod-indexation-optimism-10
    prod-indexation-fantom-250
    prod-indexation-base-8453
    prod-indexation-avalanche-43114
    prod-indexation-manta-169
    prod-indexation-neonevm-245022934
    prod-indexation-xfitest-4157
    prod-indexation-zeta-7000
  KUBE_NAMESPACE_PROD: >-
    prod-indexation-blast-81457
    prod-indexation-telcotest-2017
    prod-indexation-eth-1
    prod-indexation-gnosis-100
    prod-indexation-fantom-250
    prod-indexation-arbitrum-42161
    prod-indexation-optimism-10
    prod-indexation-canto-7700
    prod-indexation-acanto-7701
    prod-indexation-nova-42170
    prod-indexation-basetestnet-84531
    prod-indexation-bsc-56
    prod-indexation-polygon-137
    prod-indexation-base-8453
    prod-indexation-avalanche-43114
    prod-indexation-zetatestnet-7001
    prod-indexation-zeta-7000
    prod-indexation-manta-169
    prod-indexation-blasttest-168587773
    prod-indexation-x1test-195
    prod-indexation-neonevm-245022934
    prod-indexation-xfitest-4157
    prod-indexation-taikotest-167008
    prod-indexation-bitfinitytest-355113

build:
  stage: build
  before_script:
    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
    - apk add curl
  script:
    - echo "Building docker image"
    - docker pull $IMAGE_APP:latest || true
    - >-
        docker build
        --cache-from "$IMAGE_APP:latest"
        --build-arg BUILDKIT_INLINE_CACHE=1
        --tag "$IMAGE_APP:$CI_COMMIT_SHORT_SHA"
        --tag "$IMAGE_APP:latest"
        .
    - docker push "${IMAGE_APP}:${CI_COMMIT_SHORT_SHA}"
    - docker push "${IMAGE_APP}:latest"
  only:
    - merge_requests
    - master
    - tags

build-lint:
  stage: build
  variables:
    IMAGE_BASE: "${IMAGE_APP}:base-ci"
    IMAGE_BASE_PYRIGHT: "${IMAGE_APP}:base-pyright-ci"
    IMAGE_BASE_LINTERS: "${IMAGE_APP}:base-linters-ci"
    IMAGE: "${IMAGE_APP}:lint-ci"
  before_script:
    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
  script:
    - echo "Building docker image for linting"

    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_BASE --tag $IMAGE_BASE --target base - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_BASE_PYRIGHT --tag $IMAGE_BASE_PYRIGHT --target base-pyright - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE_BASE_LINTERS --tag $IMAGE_BASE_LINTERS --target base-linters - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $IMAGE --tag $IMAGE -f lint.Dockerfile .

    - docker push $IMAGE_BASE
    - docker push $IMAGE_BASE_PYRIGHT
    - docker push $IMAGE_BASE_LINTERS
    - docker push $IMAGE
  only:
    - merge_requests
  allow_failure: true

test:
  stage: test
  needs:
    - build
  image: "${IMAGE_APP}:${CI_COMMIT_SHORT_SHA}"
  variables:
    TEST_CLICKHOUSE_URL: "clickhouse+http://default:@clickhouse:8123"
    ETHEREUM_ETL_RUN_SLOW_TESTS: "true"
    PROVIDER_URL: 'https://mainnet.infura.io/v3/d8e996c8a4f3444ca0f0a407b4715424'
    TEST_ELASTICSEARCH_URL: "http://elasticsearch:9200"
  services:
    - name: ${IMAGE_CLICKHOUSE}
      alias: clickhouse
      variables:
        HEALTHCHECK_8123_TCP_ADDR: clickhouse
        HEALTHCHECK_8123_TCP_PORT: '8123'
    - name: ${IMAGE_ELASTIC}
      alias: elasticsearch
      variables:
        HEALTHCHECK_9200_TCP_ADDR: elasticsearch
        HEALTHCHECK_9200_TCP_PORT: '9200'
        discovery.type: single-node

  script:
    - >-
        pytest
        -v
        --color yes
        --cov
        --cov-report term
        --cov-report xml:coverage.xml
        --junitxml report.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  only:
    - merge_requests

test-migration-backward-compatibility:
  stage: test
  needs:
    - build
  services:
    - name: ${IMAGE_DIND}
      alias: docker
      variables:
        DOCKER_TLS_CERTDIR: ""
        HEALTHCHECK_2375_TCP_ADDR: docker
        HEALTHCHECK_2375_TCP_PORT: '2375'
    - name: ${IMAGE_CLICKHOUSE}
      alias: clickhouse
      variables:
        HEALTHCHECK_8123_TCP_ADDR: clickhouse
        HEALTHCHECK_8123_TCP_PORT: '8123'
    - name: ${IMAGE_ELASTIC}
      alias: elasticsearch
      variables:
        HEALTHCHECK_9200_TCP_ADDR: elasticsearch
        HEALTHCHECK_9200_TCP_PORT: '9200'
        discovery.type: single-node
  before_script:
    - set -eo pipefail
    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
    - >-
        alias docker_run='docker run
        --rm
        -i
        --network host
        -v "$PWD:/workdir"
        -w /workdir
        -e CLICKHOUSE_URL="clickhouse://default:@clickhouse:8123"
        -e TEST_CLICKHOUSE_URL="clickhouse://default:@clickhouse:8123"
        -e PROVIDER_URL="https://mainnet.infura.io/v3/d8e996c8a4f3444ca0f0a407b4715424"
        -e ETHEREUM_ETL_RUN_SLOW_TESTS="true"
        -e TEST_ELASTICSEARCH_URL="http://elasticsearch:9200"
        '
    - export MR_SRC_IMAGE="$IMAGE_APP:$CI_COMMIT_SHORT_SHA"
  script:
    - set -eo pipefail
    - docker_run $MR_SRC_IMAGE alembic upgrade head
    - docker_run -u root $MR_SRC_IMAGE git checkout "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    - export MR_DST_COMMIT_SHORT_SHA="$(docker_run -u root $MR_SRC_IMAGE git rev-parse HEAD | cut -c1-8)"
    - export MR_DST_IMAGE="$IMAGE_APP:$MR_DST_COMMIT_SHORT_SHA"
    - |
      out="$(docker pull "$MR_DST_IMAGE" 2>&1 || :)"
      echo "$out"
      if [[ "$out" == *"unknown"* ]]; then
        echo "Image $MR_DST_IMAGE does not exist." >&2
        echo "Please check if build succeeded for commit $MR_DST_COMMIT_SHORT_SHA." >&2
        echo "Skipping migration backward compatibility test." >&2
        exit 0
      fi
    - echo "Testing migration backward compatibility"
    - docker_run $MR_DST_IMAGE pytest -k "not migration" -v --color yes
  only:
    - merge_requests

lint-python-pyright:
  stage: lint
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  script:
    - pyright --pythonversion 3.10 --outputjson . > report_raw.json
  after_script:
    - pyright-to-gitlab-ci --src report_raw.json --output report.json --base_path .
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  allow_failure: true
  only:
    - merge_requests

lint-python-mypy:
  stage: lint
  services: []
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  variables:
    PYTHONHASHSEED: 0
  script:
    - mypy . | tee mypy.log
  after_script:
    - mypy-gitlab-code-quality < mypy.log > report.json
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  only:
    - merge_requests

lint-python-ruff:
  stage: lint
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  script:
    - ruff check . || true
    - ruff check --output-format gitlab . > report.json
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  only:
    - merge_requests

lint-python-formatting:
  stage: lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  needs:
    - build-lint
  script:
    - black --check .
  only:
    - merge_requests

lint-helm:
  stage: lint
  needs: []
  services: []
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  script:
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-balance.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-contract-token.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-gethtrace.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-nativebalance.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-resync.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-token-tokentransferpriced.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-transfers-preevents.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-verify-data-streamer.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-dextrade.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-data-streamer-dexpool.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
    - helm lint helm/charts/worker --set appName=worker -f helm/envs/worker-stage/eth-1.yaml -f helm/envs/worker-stage/raw-verify-data-trigger.yaml --set imageTag=${CI_COMMIT_SHORT_SHA}
  only:
    - master
    - merge_requests

# Temporary disabling, as more work needed.
#apply-db-migrations-stage:
#  stage: db-migrations-stage
#  image:
#    name: ${IMAGE_DIND}
#    entrypoint: [ "" ]
#  variables:
#    CLICKHOUSE_REPLICATED: 0
#    DOCKER_TLS_CERTDIR: ""
#    HEALTHCHECK_2375_TCP_ADDR: docker
#    HEALTHCHECK_2375_TCP_PORT: '2375'
#  before_script:
#    - set -eo pipefail
#    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
#    - >-
#      alias docker_run='docker run
#      --rm
#      -i
#      --network host
#      -v "$PWD:/workdir"
#      -w /workdir
#      '
#    - export MR_SRC_IMAGE="$IMAGE_APP:$CI_COMMIT_SHORT_SHA"
#  script:
#    - set -eo pipefail
#    - docker_run $MR_SRC_IMAGE python ./db/apply_migrations.py helm/charts/backend-stage-lax/values.yaml
#  only:
#    - master
#
#apply-db-migrations-prod:
#  stage: db-migrations-prod
#  image:
#    name: ${IMAGE_DIND}
#    entrypoint: [ "" ]
#  variables:
#    CLICKHOUSE_REPLICATED: 1
#    DOCKER_TLS_CERTDIR: ""
#    HEALTHCHECK_2375_TCP_ADDR: docker
#    HEALTHCHECK_2375_TCP_PORT: '2375'
#  before_script:
#    - set -eo pipefail
#    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
#    - >-
#      alias docker_run='docker run
#      --rm
#      -i
#      --network host
#      -v "$PWD:/workdir"
#      -w /workdir
#      '
#    - export MR_SRC_IMAGE="$IMAGE_APP:$CI_COMMIT_SHORT_SHA"
#  script:
#    - set -eo pipefail
#    - docker_run $MR_SRC_IMAGE python ./db/apply_migrations.py helm/charts/backend-prod-lax/values.yaml
#  only:
#    - tags


# Stage Env
.base-stage-config:
  stage: deploy-stage
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    CLUSTER_NAME: "stage-k8s"
    K8S_API: ${DG_STAGE_LAX_K8S_API}
    CI_TOKEN: ${DG_STAGE_LAX_CI_TOKEN}
    IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
    ENVIRONMENT: "stage"
    HELM_CHART: "helm/charts/worker"
  script:
    - echo "Deploying stage:"
    - /bin/sh helm/deploy.sh
  only:
    - master

raw-data-streamer-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer.yaml"

raw-verify-data-streamer-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-verify-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-verify-data-streamer.yaml"

raw-verify-data-trigger-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-verify-data-trigger"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-verify-data-trigger.yaml"

raw-data-streamer-transfers-preevents-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-transfers-preevents"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-transfers-preevents.yaml"

raw-data-streamer-gethtrace-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-gethtrace"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-gethtrace.yaml"

raw-data-streamer-balance-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-balance"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-balance.yaml"

raw-data-streamer-token-tokentransferpriced-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-token-tokentransferpriced"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-token-tokentransferpriced.yaml"

raw-data-streamer-nativebalance-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-nativebalance"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-nativebalance.yaml"

raw-data-streamer-contract-token-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-contract-token"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-contract-token.yaml"

raw-data-streamer-dexpool-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-dexpool"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-dexpool.yaml"

raw-data-streamer-dextrade-stage:
  extends: .base-stage-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-dextrade"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    SERVICE_ENV_VALUE: "helm/envs/worker-stage/raw-data-streamer-dextrade.yaml"

# Prod Env
.base-prod-config:
  stage: deploy-prod
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    CLUSTER_NAME: "prod"
    K8S_API: ${DG_PROD_LAX_K8S_API}
    CI_TOKEN: ${DG_PROD_LAX_CI_TOKEN}
    IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
    ENVIRONMENT: "prod"
    HELM_CHART: "helm/charts/worker"
  script:
    - echo "Deploying prod:"
    - /bin/sh helm/deploy.sh
  only:
    - tags

raw-data-streamer-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer.yaml"

raw-verify-data-streamer-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-verify-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-verify-data-streamer.yaml"

raw-verify-data-trigger-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-verify-data-trigger"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-verify-data-trigger.yaml"

raw-data-streamer-transfers-preevents-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-transfers-preevents"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-transfers-preevents.yaml"

raw-data-streamer-gethtrace-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-gethtrace"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD_TRACE}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-gethtrace.yaml"

raw-data-streamer-balance-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-balance"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-balance.yaml"

raw-data-streamer-token-tokentransferpriced-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-token-tokentransferpriced"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-token-tokentransferpriced.yaml"

raw-data-streamer-nativebalance-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-nativebalance"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD_TRACE}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-nativebalance.yaml"

raw-data-streamer-contract-token-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-contract-token"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD_TRACE}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-contract-token.yaml"

raw-data-streamer-dextrade-prod:
  extends: .base-prod-config
  variables:
    SERVICE_NAME: "worker"
    APP_NAME: "raw-data-streamer-dextrade"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    SERVICE_ENV_VALUE: "helm/envs/worker-prod/raw-data-streamer-dextrade.yaml"
