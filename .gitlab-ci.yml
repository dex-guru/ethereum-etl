---
default:
  image:
    name: ${IMAGE_DOCKER}
    pull_policy: if-not-present
  services:
    - name: ${IMAGE_DIND}
      alias: docker
      pull_policy: if-not-present
      variables:
        DOCKER_TLS_CERTDIR: ""
        HEALTHCHECK_2375_TCP_ADDR: docker
        HEALTHCHECK_2375_TCP_PORT: 2375

stages:
  - build
  - lint
  - test
  - deploy-stage
  - deploy-prod

variables:
  FF_SCRIPT_SECTIONS: 'true'
  DOCKER_TLS_CERTDIR: ""

  IMAGE_HELM_KUBECTL: ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/helm-kubectl:3.7.2
  IMAGE_CLICKHOUSE:   ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/clickhouse-server:23.1.3.5
  IMAGE_DOCKER:       ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/docker:23.0.6
  IMAGE_DIND:         ${CI_HARBOR_REGISTRY_HOST}/dex.guru/utils/docker:23.0.6-dind
  IMAGE_APP:          ${CI_HARBOR_REGISTRY_HOST}/dex.guru/${CI_PROJECT_TITLE}/${CI_PROJECT_TITLE}

  HELM_CHART_STAGE_LAX: 'helm/charts/backend-stage-lax'
  HELM_CHART_PROD_LAX: 'helm/charts/backend-prod-lax'
  GIT_SUBMODULE_STRATEGY: recursive
  LAX_STAGE_CLUSTER_NAME: stage-k8s
  LAX_PROD_CLUSTER_NAME: prod-k8s
  KUBE_NAMESPACE_STAGE: >-
    stage-indexation-gnosis-100
    stage-indexation-eth-1
    stage-indexation-bsc-56
    stage-indexation-polygon-137
    stage-indexation-fantom-250
    stage-indexation-arbitrum-42161
    stage-indexation-optimism-10
    stage-indexation-canto-7700
    stage-indexation-acanto-7701
    stage-indexation-basetestnet-84531
    stage-indexation-nova-42170
    stage-indexation-base-8453
  KUBE_NAMESPACE_STAGE_TRACE: >-
    stage-indexation-eth-1
    stage-indexation-bsc-56
    stage-indexation-polygon-137
    stage-indexation-arbitrum-42161
    stage-indexation-canto-7700
    stage-indexation-basetestnet-84531
    stage-indexation-nova-42170
    stage-indexation-optimism-10
    stage-indexation-fantom-250
    stage-indexation-base-8453
  KUBE_NAMESPACE_PROD_TRACE: >-
    prod-indexation-eth-1
    prod-indexation-bsc-56
    prod-indexation-polygon-137
    prod-indexation-arbitrum-42161
    prod-indexation-canto-7700
    prod-indexation-basetestnet-84531
    prod-indexation-nova-42170
    prod-indexation-optimism-10
    prod-indexation-fantom-250
    prod-indexation-base-8453
  KUBE_NAMESPACE_PROD: >-
    prod-indexation-eth-1
    prod-indexation-gnosis-100
    prod-indexation-fantom-250
    prod-indexation-arbitrum-42161
    prod-indexation-optimism-10
    prod-indexation-canto-7700
    prod-indexation-acanto-7701
    prod-indexation-nova-42170
    prod-indexation-basetestnet-84531
    prod-indexation-bsc-56
    prod-indexation-polygon-137
    prod-indexation-base-8453

# Build test:
build:
  stage: build
  before_script:
    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
  script:
    - echo "Building docker image"
    - docker pull $IMAGE_APP:latest || true
    - >-
        docker build
        --cache-from "$IMAGE_APP:latest"
        --build-arg BUILDKIT_INLINE_CACHE=1
        --tag "$IMAGE_APP:$CI_COMMIT_SHORT_SHA"
        --tag "$IMAGE_APP:latest"
        .
    - docker push "${IMAGE_APP}:${CI_COMMIT_SHORT_SHA}"
    - docker push "${IMAGE_APP}:latest"
  only:
    - merge_requests
    - master
    - tags

build-lint:
  stage: build
  variables:
    IMAGE_BASE: "${IMAGE_APP}:base-ci"
    IMAGE_BASE_PYRIGHT: "${IMAGE_APP}:base-pyright-ci"
    IMAGE_BASE_LINTERS: "${IMAGE_APP}:base-linters-ci"
    IMAGE: "${IMAGE_APP}:lint-ci"
  before_script:
    - docker login -u "${CI_HARBOR_REGISTRY_USER}" -p "${CI_HARBOR_REGISTRY_PASSWORD}" "${CI_HARBOR_REGISTRY_HOST}"
  script:
    - echo "Building docker image for linting"
    - docker pull $IMAGE || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $IMAGE_BASE --target base - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $IMAGE_BASE_PYRIGHT --target base-pyright - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $IMAGE_BASE_LINTERS --target base-linters - < lint.Dockerfile
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --tag $IMAGE -f lint.Dockerfile .

    - docker push $IMAGE
  only:
    - merge_requests
  allow_failure: true

test:
  stage: test
  needs:
    - build
  image: "${IMAGE_APP}:${CI_COMMIT_SHORT_SHA}"
  variables:
    TEST_CLICKHOUSE_URL: "http://default:@clickhouse:8123"
    ETHEREUM_ETL_RUN_SLOW_TESTS: "true"
    PROVIDER_URL: 'http://10.0.100.149:8080/archive/1'
  services:
    - name: ${IMAGE_CLICKHOUSE}
      alias: clickhouse
      variables:
        HEALTHCHECK_8123_TCP_ADDR: clickhouse
        HEALTHCHECK_8123_TCP_PORT: '8123'
  script:
    - >-
        pytest
        -v
        --color yes
        --cov
        --cov-report term
        --cov-report xml:coverage.xml
        --junitxml report.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
  only:
    - merge_requests

lint-python-pyright:
  stage: lint
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  script:
    - pyright --pythonversion 3.10 --outputjson . > report_raw.json
  after_script:
    - pyright-to-gitlab-ci --src report_raw.json --output report.json --base_path .
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  allow_failure: true
  only:
    - merge_requests

lint-python-mypy:
  stage: lint
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  variables:
    PYTHONHASHSEED: 0
  services: []
  script:
    - mypy . | tee mypy.log
  after_script:
    - mypy-gitlab-code-quality < mypy.log > report.json
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  only:
    - merge_requests

lint-python-ruff:
  stage: lint
  needs:
    - build-lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  script:
    - ruff check . || true
    - ruff check --format gitlab . > report.json
  artifacts:
    paths:
      - report.json
    reports:
      codequality: report.json
    expire_in: 1 month
  only:
    - merge_requests

lint-python-formatting:
  stage: lint
  image: "${IMAGE_APP}:lint-ci"
  services: []
  needs:
    - build-lint
  script:
    - black --check .
  only:
    - merge_requests

lint-helm:
  stage: lint
  needs: []
  services: []
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  script:
    - helm lint helm/charts/backend-stage-lax --set appName=raw-data-streamer --set imageTag=${CI_COMMIT_SHORT_SHA}
#    - helm lint helm/charts/backend-prod-lax --set appName=raw-data-streamer --set imageTag=${CI_COMMIT_SHORT_SHA}
  only:
    - master
    - merge_requests


raw-data-streamer-stage:
  stage: deploy-stage
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    SERVICE_NAME: "raw-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
    HELM_CHART: ${HELM_CHART_STAGE_LAX}
  script:
    - helm/lax_stage_deploy.sh
  only:
    - master

#raw-data-streamer-resync-stage:
#  stage: deploy-stage
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-data-streamer-resync"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
#    HELM_CHART: ${HELM_CHART_STAGE_LAX}
#  script:
#    - helm/lax_stage_deploy.sh
#  only:
#    - master

raw-data-streamer-prod:
  stage: deploy-prod
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    SERVICE_NAME: "raw-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
    HELM_CHART: ${HELM_CHART_PROD_LAX}
  script:
    - helm/lax_prod_deploy.sh
  only:
    - tags

#raw-data-streamer-resync-prod:
#  stage: deploy-prod
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-data-streamer-resync"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
#    HELM_CHART: ${HELM_CHART_PROD_LAX}
#  script:
#    - helm/lax_prod_deploy.sh
#  only:
#    - tags

#raw-traces-data-streamer-stage:
#  stage: deploy-stage
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-traces-data-streamer"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE_TRACE}
#    HELM_CHART: ${HELM_CHART_STAGE_LAX}
#  script:
#    - helm/lax_stage_deploy.sh
#  only:
#    - master

raw-traces-data-streamer-prod:
  stage: deploy-prod
  image:
    name: ${IMAGE_HELM_KUBECTL}
    entrypoint: [""]
  variables:
    SERVICE_NAME: "raw-traces-data-streamer"
    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD_TRACE}
    HELM_CHART: ${HELM_CHART_PROD_LAX}
  script:
    - helm/lax_prod_deploy.sh
  only:
    - tags

#raw-verify-data-streamer-stage:
#  stage: deploy-stage
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-verify-data-streamer"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_STAGE}
#    HELM_CHART: ${HELM_CHART_STAGE_LAX}
#  script:
#    - helm/lax_stage_deploy.sh
#  only:
#    - master
#
#raw-verify-data-streamer-prod:
#  stage: deploy-prod
#  image:
#    name: ${IMAGE_HELM_KUBECTL}
#    entrypoint: [""]
#  variables:
#    SERVICE_NAME: "raw-verify-data-streamer"
#    KUBE_NAMESPACE: ${KUBE_NAMESPACE_PROD}
#    HELM_CHART: ${HELM_CHART_PROD_LAX}
#  script:
#    - helm/lax_prod_deploy.sh
#  only:
#    - tags
#
